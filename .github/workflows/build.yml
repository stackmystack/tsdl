name: Build

on:
  workflow_call

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "-D warnings"

jobs:
  build:
    name: ${{ matrix.platform }} (${{ matrix.target }}) (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 40
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux-arm
          - linux-arm64
          - linux-x64
          - linux-x86
          - macos-arm64
          - macos-x64

        include:
          # When adding a new `target`:
          # 1. Define a new platform alias above
          # 2. Add a new record to a matrix map in `cli/npm/install.js`
          - { platform: linux-arm   , target: arm-unknown-linux-gnueabi , os: ubuntu-latest  }
          - { platform: linux-arm64 , target: aarch64-unknown-linux-gnu , os: ubuntu-latest  }
          - { platform: linux-x64   , target: x86_64-unknown-linux-gnu  , os: ubuntu-latest  }
          - { platform: linux-x86   , target: i686-unknown-linux-gnu    , os: ubuntu-latest  }
          - { platform: macos-arm64 , target: aarch64-apple-darwin      , os: macos-14       }
          - { platform: macos-x64   , target: x86_64-apple-darwin       , os: macos-12       }

    env:
      BUILD_CMD: cargo

    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v4

      - run: rustup toolchain install stable --profile minimal
      - run: rustup target add ${{ matrix.target }}

      - name: Install cross
        if: ${{ matrix.os == 'ubuntu-latest' }}
        uses: taiki-e/install-action@v2
        with:
          tool: cross

      - name: Build custom cross image
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          target="${{ matrix.target }}"
          image=ghcr.io/cross-rs/$target:custom
          echo "CROSS_IMAGE=$image"                                              >> $GITHUB_ENV

          echo "[target.$target]"                                                >> Cross.toml
          echo "image = \"$image\""                                              >> Cross.toml
          echo "CROSS_CONFIG=$PWD/Cross.toml"                                    >> $GITHUB_ENV

          echo "FROM ghcr.io/cross-rs/$target:edge"                              >> Dockerfile
          echo "RUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash -"   >> Dockerfile
          echo "RUN apt-get update && apt-get -y install nodejs"                 >> Dockerfile
          docker build -t $image .

      - name: Setup env extras
        if: ${{ matrix.os == 'ubuntu-latest' }}
        env:
          TARGET: ${{ matrix.target }}
        run: |
          PATH="$PWD/.github/scripts:$PATH"
          echo "$PWD/.github/scripts"                     >> $GITHUB_PATH

          echo "ROOT=$PWD"                                >> $GITHUB_ENV
          echo "TARGET=$TARGET"                           >> $GITHUB_ENV

          echo "BUILD_CMD=cross"                          >> $GITHUB_ENV
          runner=$(BUILD_CMD=cross cross.sh bash -c "env | sed -nr '/^CARGO_TARGET_.*_RUNNER=/s///p'")
          [ -n "$runner" ] && echo "CROSS_RUNNER=$runner" >> $GITHUB_ENV

      - run: $BUILD_CMD build --release --target=${{ matrix.target }}

      # It would have been great to test also the built binaries for each platform
      # using cross, but I faced many issues, mainly on arm/aarch64:
      # 1. assert_cmd should slip "--" between the command and its arguments
      # 2. git, curl, chmod, etc … would work, but not tree-sitter-cli, for 2 reasons:
      #    1. we need to recognize if we're being run with cross using CARGO_*_RUNNER envvar,
      #       and if so, we need to modify the command + slip "--" after its args
      #    2. but even if we did, tree-sitter-cli itself invokes node directly, and that
      #       would not work because it doesn't recognize the runner.
      #
      # So I abandoned it. We have to rely on the fact that tree-sitter-cli is well tested
      # on these platforms, and we need to make sure that tsdl itself runs well on linux/macOS.
      - name: Upload CLI artifact
        uses: actions/upload-artifact@v4
        with:
          name: tsdl.${{ matrix.platform }}
          path: target/${{ matrix.target }}/release/tsdl
          if-no-files-found: error
          retention-days: 7
